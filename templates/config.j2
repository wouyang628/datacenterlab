#jinja2: lstrip_blocks: True
interfaces {
  {% for interface in interfaces %}
    {% set list1 = interface["name"].split('.') %}
    {{ list1[0] }} {
        unit {{ list1[1] }} {
            description "{{interface["description"] }}";
            family {{ interface["address_family"] }} {
              {% if interface["address_family"] == "inet" %}
                address {{interface["ip_address"] }};
              {% elif interface["address_family"] == "ethernet-switching" %}
                interface-mode {{ interface["interface-mode"] }};
                vlan {
                    members {{ interface["vlan_members"] }};
                }
              {% endif %}
            }
        }
    }
  {% endfor %}
}

routing-options {
    router-id {{ router_id }};
    autonomous-system {{ as }};
}

snmp {
    community public {
        authorization read-only;
    }
}

protocols {
    bgp {
        group underlay {
            type external;
            export send-direct;
            multipath;
            {% for neighbor in underlay["neighbors"] %}
            neighbor {{ neighbor["neighbor_address"] }} {
                peer-as {{ neighbor["neighbor_as"]}};
                description {{ neighbor["description"] }};
            }
            {% endfor %}
        }
        group overlay {
            type internal;
            local-address {{ overlay["local-address"] }};
            family evpn {
                signaling;
            }
            {% if overlay["route-reflector"] == "yes" %}
            cluster {{ overlay["cluster-id"] }};
            {% endif %}
            local-as {{ overlay["overlay-as"] }};
            multipath;
            {% for neighbor in overlay["neighbors"] %}
            neighbor {{ neighbor["neighbor_address"] }} {
                description {{ neighbor["description"] }};
            }
            {% endfor %}
        }
    }
    lldp {
        {% for interface in lldp_interfaces %}
        interface {{ interface["name"]}};
        {% endfor %}
    }
    {% if role == "leaf" %}
    {% if vlans is defined %}
    evpn {
        vni-options {
            vni 100 {
                vrf-target target:10001:1;
            }
        }
        encapsulation vxlan;
        multicast-mode ingress-replication;
        extended-vni-list all;
    }
    {% endif %}
    {% endif %}
}

policy-options {
    policy-statement send-direct {
        term 10 {
            from {
                protocol direct;
                route-filter 11.0.0.0/8 orlonger;
            }
            then accept;
        }
    }
    {% if role == "leaf" %}
    {% if communities is defined %}
    policy-statement EVPN_VRF_IMPORT {
        {% for community in communities %}
        term {{ community["community_name"] }} {
            from community {{ community["community_name"] }};
            then accept;
        }
        {% endfor %}
    }
    {% for community in communities %}
    community {{ community["community_name"] }} members {{ community["community_member"]}};
    {% endfor %}
    {% endif %}
    {% endif %}
}

{% if role == "leaf" %}
{% if vlans is defined %}
switch-options {
    vtep-source-interface lo0.0;
    route-distinguisher {{ router_id }}:1;
    vrf-import EVPN_VRF_IMPORT;
    vrf-target target:65000:2;
}
{% endif %}
{% endif %}

{% if vlans is defined %}
vlans {
    {% for vlan in vlans %}
    {{ vlan["vlan_name"] }} {
        vlan-id {{ vlan["vlan_id"] }};
        vxlan {
            vni {{ vlan["vxlan_vni"]}};
            {% if vlan["ingress-node-replication"] == "yes" %}
            ingress-node-replication;
            {% endif %}
        }
    }
    {% endfor %}
}
{% endif %}